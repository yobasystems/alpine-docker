# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- build
- test
- deploy
- manifest

include:
- remote: https://gitlab.com/yobasystems/gitlab-ci-templates/raw/master/container_scanning_all_arch.yml
- template: Security/Secret-Detection.gitlab-ci.yml
- template: Security/SAST.gitlab-ci.yml

.build_template: &build_definition
  image: yobasystems/alpine-docker:dind
  stage: build
  script:
    - echo "Build Timestamp ${CI_COMMIT_TIMESTAMP} - ${CI_COMMIT_SHORT_SHA}"
    - echo "Building for ARCH=${ARCH}, PLATFORM=${PLATFORM}"
    - apk add --update git
    - cd alpine-${BUILD_TYPE}-${ARCH}/
    - docker build
      --build-arg VCS_REF=${CI_COMMIT_SHORT_SHA}
      --build-arg BUILD_DATE=${CI_COMMIT_TIMESTAMP}
      -t ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH}-${BUILD_TYPE}
      --platform linux/${PLATFORM}
      --platform linux/${PLATFORM}
      .

amd64 dind deploy:
  <<: *deploy_definition
  tags:
    - amd64
  variables:
    ARCH: amd64
    ARCH2: x86_64
    PLATFORM: amd64
  needs:
    - amd64 dind build

arm32v7 dind deploy:
  <<: *deploy_definition
  tags:
    - armhf
  variables:
    ARCH: armhf
    ARCH2: arm32v7
    PLATFORM: arm/v7
  needs:
    - arm32v7 dind build

arm64v8 dind deploy:
  <<: *deploy_definition
  tags:
    - aarch64
  variables:
    ARCH: aarch64
    ARCH2: arm64v8
    PLATFORM: arm64/v8
  needs:
    - arm64v8 dind build

manifest creation dind latest:
  image: yobasystems/alpine-docker:dind
  stage: manifest
  needs:
    - amd64 dind deploy
    - arm32v7 dind deploy
    - arm64v8 dind deploy
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mkdir -p ~/.docker
    - echo '{"experimental":"enabled"}' > ~/.docker/config.json
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - echo "$QUAY_PASSWORD" | docker login -u "$QUAY_USERNAME" quay.io --password-stdin
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin
    - |
      create_and_push_manifest() {
        repo=$1
        tag=$2
        docker manifest create $repo:$tag \
          $repo:amd64-dind \
          $repo:armhf-dind \
          $repo:aarch64-dind
        docker manifest annotate $repo:$tag $repo:amd64-dind --os linux --arch amd64
        docker manifest annotate $repo:$tag $repo:armhf-dind --os linux --arch arm --variant v7
        docker manifest annotate $repo:$tag $repo:aarch64-dind --os linux --arch arm64 --variant v8
        docker manifest push $repo:$tag
      }
    - |
      for repo in $CI_REGISTRY_IMAGE $DOCKER_REGISTRY_DOCKERHUB_REPO quay.io/$DOCKER_REGISTRY_QUAY_REPO ghcr.io/$DOCKER_REGISTRY_GHCR_REPO; do
        create_and_push_manifest $repo dind
      done

manifest creation dind version:
  image: yobasystems/alpine-docker:dind
  stage: manifest
  needs:
    - manifest creation dind latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - mkdir -p ~/.docker
    - echo '{"experimental":"enabled"}' > ~/.docker/config.json
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - echo "$QUAY_PASSWORD" | docker login -u "$QUAY_USERNAME" quay.io --password-stdin
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin
    - |
      create_and_push_manifest() {
        repo=$1
        tag=$2
        docker manifest create $repo:$tag \
          $repo:amd64-dind \
          $repo:armhf-dind \
          $repo:aarch64-dind
        docker manifest annotate $repo:$tag $repo:amd64-dind --os linux --arch amd64
        docker manifest annotate $repo:$tag $repo:armhf-dind --os linux --arch arm --variant v7
        docker manifest annotate $repo:$tag $repo:aarch64-dind --os linux --arch arm64 --variant v8
        docker manifest push $repo:$tag
      }
    - echo "Processing tag $CI_COMMIT_TAG"
    - VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f1)
    - MAJOR=$(echo $VERSION | cut -d. -f1)
    - MINOR=$(echo $VERSION | cut -d. -f2)
    - PATCH=$(echo $VERSION | cut -d. -f3)
    - |
      for repo in $CI_REGISTRY_IMAGE $DOCKER_REGISTRY_DOCKERHUB_REPO quay.io/$DOCKER_REGISTRY_QUAY_REPO ghcr.io/$DOCKER_REGISTRY_GHCR_REPO; do
        create_and_push_manifest $repo "$CI_COMMIT_TAG-dind"
        create_and_push_manifest $repo "$MAJOR-dind"
        create_and_push_manifest $repo "$MAJOR.$MINOR-dind"
        create_and_push_manifest $repo "$MAJOR.$MINOR.$PATCH-dind"
      done
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token "$CI_REGISTRY" --password-stdin
    - docker push ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH}-${BUILD_TYPE}

amd64 docker build:
  <<: *build_definition
  tags:
    - amd64
  variables:
    ARCH: amd64
    PLATFORM: amd64
    BUILD_TYPE: docker

amd64 dind build:
  <<: *build_definition
  tags:
    - amd64
  variables:
    ARCH: amd64
    PLATFORM: amd64
    BUILD_TYPE: dind

arm32v7 docker build:
  <<: *build_definition
  tags:
    - armhf
  variables:
    ARCH: armhf
    PLATFORM: arm/v7
    BUILD_TYPE: docker

arm32v7 dind build:
  <<: *build_definition
  tags:
    - armhf
  variables:
    ARCH: armhf
    PLATFORM: arm/v7
    BUILD_TYPE: dind

arm64v8 docker build:
  <<: *build_definition
  tags:
    - aarch64
  variables:
    ARCH: aarch64
    PLATFORM: arm64/v8
    BUILD_TYPE: docker

arm64v8 dind build:
  <<: *build_definition
  tags:
    - aarch64
  variables:
    ARCH: aarch64
    PLATFORM: arm64/v8
    BUILD_TYPE: dind

sast:
  stage: test
.deploy_template: &deploy_definition
  image: yobasystems/alpine-docker:dind
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - echo "$QUAY_PASSWORD" | docker login -u "$QUAY_USERNAME" quay.io --password-stdin
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin
    - docker pull ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH}
    - docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} $CI_REGISTRY_IMAGE:${ARCH}
    - docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} $DOCKER_REGISTRY_DOCKERHUB_REPO:${ARCH}
    - docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} quay.io/$DOCKER_REGISTRY_QUAY_REPO:${ARCH}
    - docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} ghcr.io/$DOCKER_REGISTRY_GHCR_REPO:${ARCH}
    - docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} $CI_REGISTRY_IMAGE:${ARCH2}
    - docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} $DOCKER_REGISTRY_DOCKERHUB_REPO:${ARCH2}
    - docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} quay.io/$DOCKER_REGISTRY_QUAY_REPO:${ARCH2}
    - docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} ghcr.io/$DOCKER_REGISTRY_GHCR_REPO:${ARCH2}
    - docker push $CI_REGISTRY_IMAGE:${ARCH}
    - docker push $DOCKER_REGISTRY_DOCKERHUB_REPO:${ARCH}
    - docker push quay.io/$DOCKER_REGISTRY_QUAY_REPO:${ARCH}
    - docker push ghcr.io/$DOCKER_REGISTRY_GHCR_REPO:${ARCH}
    - docker push $CI_REGISTRY_IMAGE:${ARCH2}
    - docker push $DOCKER_REGISTRY_DOCKERHUB_REPO:${ARCH2}
    - docker push quay.io/$DOCKER_REGISTRY_QUAY_REPO:${ARCH2}
    - docker push ghcr.io/$DOCKER_REGISTRY_GHCR_REPO:${ARCH2}
    - |
      if [[ "$CI_COMMIT_TAG" ]]; then
        docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}-${ARCH}
        docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} $DOCKER_REGISTRY_DOCKERHUB_REPO:${CI_COMMIT_TAG}-${ARCH}
        docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} quay.io/$DOCKER_REGISTRY_QUAY_REPO:${CI_COMMIT_TAG}-${ARCH}
        docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} ghcr.io/$DOCKER_REGISTRY_GHCR_REPO:${CI_COMMIT_TAG}-${ARCH}
        docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}-${ARCH2}
        docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} $DOCKER_REGISTRY_DOCKERHUB_REPO:${CI_COMMIT_TAG}-${ARCH2}
        docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} quay.io/$DOCKER_REGISTRY_QUAY_REPO:${CI_COMMIT_TAG}-${ARCH2}
        docker tag ${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHORT_SHA}:${ARCH} ghcr.io/$DOCKER_REGISTRY_GHCR_REPO:${CI_COMMIT_TAG}-${ARCH2}
        docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}-${ARCH}
        docker push $DOCKER_REGISTRY_DOCKERHUB_REPO:${CI_COMMIT_TAG}-${ARCH}
        docker push quay.io/$DOCKER_REGISTRY_QUAY_REPO:${CI_COMMIT_TAG}-${ARCH}
        docker push ghcr.io/$DOCKER_REGISTRY_GHCR_REPO:${CI_COMMIT_TAG}-${ARCH}
        docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG}-${ARCH2}
        docker push $DOCKER_REGISTRY_DOCKERHUB_REPO:${CI_COMMIT_TAG}-${ARCH2}
        docker push quay.io/$DOCKER_REGISTRY_QUAY_REPO:${CI_COMMIT_TAG}-${ARCH2}
        docker push ghcr.io/$DOCKER_REGISTRY_GHCR_REPO:${CI_COMMIT_TAG}-${ARCH2}
      fi

amd64 docker deploy:
  <<: *deploy_definition
  tags:
    - amd64
  variables:
    ARCH: amd64
    ARCH2: x86_64
    PLATFORM: amd64
  needs:
    - amd64 docker build

arm32v7 docker deploy:
  <<: *deploy_definition
  tags:
    - armhf
  variables:
    ARCH: armhf
    ARCH2: arm32v7
    PLATFORM: arm/v7
  needs:
    - arm32v7 docker build

arm64v8 docker deploy:
  <<: *deploy_definition
  tags:
    - aarch64
  variables:
    ARCH: aarch64
    ARCH2: arm64v8
    PLATFORM: arm64/v8
  needs:
    - arm64v8 docker build

manifest creation latest:
  image: yobasystems/alpine-docker:dind
  stage: manifest
  needs:
    - amd64 docker deploy
    - arm32v7 docker deploy
    - arm64v8 docker deploy
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mkdir -p ~/.docker
    - echo '{"experimental":"enabled"}' > ~/.docker/config.json
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - echo "$QUAY_PASSWORD" | docker login -u "$QUAY_USERNAME" quay.io --password-stdin
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin
    - |
      create_and_push_manifest() {
        repo=$1
        tag=$2
        docker manifest create $repo:$tag \
          $repo:amd64 \
          $repo:armhf \
          $repo:aarch64
        docker manifest annotate $repo:$tag $repo:amd64 --os linux --arch amd64
        docker manifest annotate $repo:$tag $repo:armhf --os linux --arch arm --variant v7
        docker manifest annotate $repo:$tag $repo:aarch64 --os linux --arch arm64 --variant v8
        docker manifest push $repo:$tag
      }
    - |
      for repo in $CI_REGISTRY_IMAGE $DOCKER_REGISTRY_DOCKERHUB_REPO quay.io/$DOCKER_REGISTRY_QUAY_REPO ghcr.io/$DOCKER_REGISTRY_GHCR_REPO; do
        create_and_push_manifest $repo latest
      done

manifest creation version:
  image: yobasystems/alpine-docker:dind
  stage: manifest
  needs:
    - manifest creation latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - mkdir -p ~/.docker
    - echo '{"experimental":"enabled"}' > ~/.docker/config.json
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - echo "$QUAY_PASSWORD" | docker login -u "$QUAY_USERNAME" quay.io --password-stdin
    - echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin
    - |
      create_and_push_manifest() {
        repo=$1
        tag=$2
        docker manifest create $repo:$tag --amend \
          $repo:amd64 \
          $repo:armhf \
          $repo:aarch64
        docker manifest annotate $repo:$tag $repo:amd64 --os linux --arch amd64
        docker manifest annotate $repo:$tag $repo:armhf --os linux --arch arm --variant v7
        docker manifest annotate $repo:$tag $repo:aarch64 --os linux --arch arm64 --variant v8
        docker manifest push $repo:$tag
      }
    - echo "Processing tag $CI_COMMIT_TAG"
    - VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f1)
    - MAJOR=$(echo $VERSION | cut -d. -f1)
    - MINOR=$(echo $VERSION | cut -d. -f2)
    - PATCH=$(echo $VERSION | cut -d. -f3)
    - |
      for repo in $CI_REGISTRY_IMAGE $DOCKER_REGISTRY_DOCKERHUB_REPO quay.io/$DOCKER_REGISTRY_QUAY_REPO ghcr.io/$DOCKER_REGISTRY_GHCR_REPO; do
        create_and_push_manifest $repo $CI_COMMIT_TAG
        create_and_push_manifest $repo $MAJOR
        create_and_push_manifest $repo $MAJOR.$MINOR
        create_and_push_manifest $repo $MAJOR.$MINOR.$PATCH
      done
